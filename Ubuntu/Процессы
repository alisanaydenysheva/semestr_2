Жизненный цикл процесса
![image](https://user-images.githubusercontent.com/89997083/152748235-cb242aa5-50f5-46fb-aa7d-ffe9cdaae02c.png)


init первый процесс в системе.
Функция fork порождает новый процесс со всеми его атрибутами и ресурсами((сист вызов clone)).
После вызова fork() дочерний и родительский  процессы продолжают работу с точки вызова  fork().
Дочернему процессу fork возвращает 0Б роительскиому PID и дочернему. 
Родитель и ребенок совпадают за исключением уникального номера.
Первым запускается ребенок.
Copy on write
1)Адрессное пространоство родетлея и порожденного процесса совместное.
2)Дубликат ресурсов создается только при попытке изменить данные
3)Для создания потока использутеся тот же системный вызов clone.

Как появляется новый процесс: exec
![image](https://user-images.githubusercontent.com/89997083/152748314-143d1aa6-f684-4b0c-aac5-3dd9d18a80e4.png)

Смерть процессса
1)Процесс заканчивается системным вызовом exit() либо сигналом завершения
2)Сигнал процессу можно отправить командой kill
3)После завершения процесса дочерний процесс находится в состоянии зомби
4)Если родительский процесс завершился раньше дочернего - родительским становится либо другой поток процесса, либо init(pid = 1)
Статус завершенного процесса доступен в переменной окружения  $? - она зранитт код завершения в последней команде

Ready
1)Процесс готов к выполнению
2)Ждет выделения процессорного времени планировщиком
3)Посмотреть очередь процесса
4)Команды load average

Running
1) Запущен процесс
2)Заупущен, пока выделено время или появится приоритетная задача
3)SIGCONT чтобы выйди из режима остановки
4)fg выйти из режима сна(ctrl+z)
 
 Трассировщики - программы, запускающие код пошагово, используются для отладки(Исправление ошибок, с помощью break_point)
 
 Sleeping - режим ожидания ресурсов системы.
 Есть режим uninterrupteble
